{"version":3,"sources":["icons/book-reader-solid.svg","icons/bookmark-solid.svg","icons/check-solid.svg","icons/arrow-drop-down.svg","BooksAPI.js","Book.js","Search.js","BookShelf.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","Book","getIcon","shelfValue","CurrentlyReadingIcon","WantToReadIcon","ReadIcon","NoneIcon","_this2","this","props","react_default","a","createElement","className","style","width","height","backgroundImage","imageLinks","thumbnail","onChange","event","reloadSearchPage","updateBookShelf","target","value","disabled","title","undefined","authors","Component","Search","state","searchBar","searchResults","_this","getQueryResults","updateSearch","e","setState","defineProperty","name","queryString","parseResults","displayResults","queryResponse","error","getAllResponse","filter","map","returnVal","forEach","bookOfResponse","filteredResponse","Link","to","type","placeholder","searchBarVal","src_Book","key","length","BookShelf","loadUpdatedShelves","localBooksArray","bookObject","BooksApp","queryResponseArray","Route","exact","path","render","src_Search","src_BookShelf","ReactDOM","HashRouter","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.36d91fcf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/book-reader-solid.336c891a.svg\";","module.exports = __webpack_public_path__ + \"static/media/bookmark-solid.4ab98fb2.svg\";","module.exports = __webpack_public_path__ + \"static/media/check-solid.358e77fa.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow-drop-down.9d4e3f36.svg\";","\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React, { Component } from 'react';\r\nimport CurrentlyReadingIcon from './icons/book-reader-solid.svg';\r\nimport WantToReadIcon from './icons/bookmark-solid.svg';\r\nimport ReadIcon from './icons/check-solid.svg';\r\nimport NoneIcon from './icons/arrow-drop-down.svg';\r\n\r\n\r\n\r\nclass Book extends Component {\r\n  getIcon = (shelfValue) => {\r\n    switch (shelfValue) {\r\n      case \"currentlyReading\":\r\n        return CurrentlyReadingIcon;\r\n\r\n      case \"wantToRead\":\r\n        return WantToReadIcon;\r\n\r\n      case \"read\":\r\n        return ReadIcon;\r\n\r\n      default:\r\n        return NoneIcon;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let book = this.props.book;\r\n    return (\r\n      <li>\r\n        <div className=\"book\">\r\n          <div className=\"book-top\">\r\n            <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${book.imageLinks.thumbnail})` }}></div>\r\n            <div className=\"book-shelf-changer\" style={{ backgroundImage: `url(${this.getIcon(book.shelf)})` }}>\r\n              <select \r\n                onChange={(event) => {\r\n                  if(this.props.reloadSearchPage){\r\n                    this.props.reloadSearchPage();\r\n                  }\r\n                  this.props.updateBookShelf(book, event.target.value);\r\n                }} \r\n                value={book.shelf} >\r\n                <option value=\"move\" disabled>Move to...</option>\r\n                <option value=\"currentlyReading\">Currently Reading</option>\r\n                <option value=\"wantToRead\">Want to Read</option>\r\n                <option value=\"read\">Read</option>\r\n                <option value=\"none\">None</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div className=\"book-title\">{book.title}</div>\r\n          {(book.authors !== undefined) && <div className=\"book-authors\">{book.authors}</div>}\r\n        </div>\r\n      </li>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Book","import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { search, getAll } from './BooksAPI';\r\nimport Book from \"./Book\"\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    searchBar: \"\",\r\n    searchResults: []\r\n  }\r\n\r\n  reloadSearchPage = () => {\r\n    this.getQueryResults(this.state.searchBar);\r\n  }\r\n\r\n  updateSearch = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n    // Dont search too quickly! xD Didn't get debounce to work unfortunately.\r\n\r\n    this.getQueryResults(e.target.value);\r\n  }\r\n\r\n  getQueryResults = (queryString) => {\r\n    if (queryString !== \"\") {\r\n      // Search the string, parse the response\r\n      search(queryString).then(this.parseResults);\r\n    } else {\r\n      // Skip parsing and display nothing.\r\n      this.displayResults([]);\r\n    }\r\n  }\r\n\r\n  parseResults = (queryResponse) => {\r\n    // Parse the query results to display.\r\n    // If error or undefined somehow, display empty array.\r\n    // Else filter out books in our collection, then display.\r\n    // If no shelf value present, shelfs default is set to none.\r\n    // If there's no image for the book, omit the result.\r\n    if (queryResponse === undefined || queryResponse.error) {\r\n      this.displayResults([]);\r\n    } else {\r\n      getAll()\r\n        .then((getAllResponse) => {\r\n          return queryResponse.filter((book) => book.imageLinks !== undefined).map(book => {\r\n            let returnVal;\r\n            getAllResponse.forEach(bookOfResponse => {\r\n              if (book.id === bookOfResponse.id) {\r\n                returnVal = bookOfResponse;\r\n              }\r\n            });\r\n\r\n            // Converting the results to objects with shelves if they don't have them already\r\n            if (!returnVal) {\r\n              return { ...book, shelf: \"none\" };\r\n            }\r\n            return returnVal;\r\n          });\r\n        }).then((filteredResponse) => {\r\n          this.displayResults(filteredResponse);\r\n        })\r\n    }\r\n  }\r\n\r\n  displayResults = (queryResponse) => {\r\n    // Sets the search results array to the query response, which is then rendered later\r\n    this.setState(() => {\r\n      return { searchResults: queryResponse };\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"search-books\">\r\n        <div className=\"search-books-bar\">\r\n          <Link to=\"/\" className=\"close-search\">Close</Link>\r\n          <div className=\"search-books-input-wrapper\">\r\n            <input type=\"text\" name=\"searchBar\" placeholder=\"Search by title or author\" value={this.state.searchBarVal} onChange={this.updateSearch} />\r\n          </div>\r\n        </div>\r\n        <div className=\"search-books-results\">\r\n          <ol className=\"books-grid\">\r\n            {\r\n              this.state.searchResults.map((book) => {\r\n                return <Book\r\n                  book={book}\r\n                  key={book.id}\r\n                  updateBookShelf={this.props.updateBookShelf}\r\n                  reloadSearchPage={this.reloadSearchPage}\r\n                />\r\n              })\r\n            }\r\n            {this.state.searchResults.length === 0 && this.state.searchBar.length > 0 &&\r\n              <h2>No results</h2>\r\n            }\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Search","import React, { Component } from 'react';\r\nimport { getAll } from './BooksAPI';\r\nimport { Link } from 'react-router-dom';\r\nimport Book from './Book';\r\n\r\nclass BookShelf extends Component {\r\n\r\n  componentDidMount() {\r\n    // Initial load\r\n    getAll().then(this.props.loadUpdatedShelves);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"list-books-title\">\r\n          <h1>MyReads</h1>\r\n        </div>\r\n        <div className=\"list-books-content\">\r\n          <div>\r\n            {/* If there's no books containing currentlyReading; hide list */}\r\n            {this.props.localBooksArray.filter((e) => e.shelf === \"currentlyReading\").length > 0 &&\r\n              <div className=\"bookshelf\">\r\n                <h2 className=\"bookshelf-title\">Currently Reading</h2>\r\n                <div className=\"bookshelf-books\">\r\n                  <ol className=\"books-grid\">\r\n                    {/* Book component: map currently reading array */}\r\n                    {this.props.localBooksArray.filter((e) => e.shelf === \"currentlyReading\").map((bookObject) => {\r\n                      return <Book\r\n                        book={bookObject}\r\n                        key={bookObject.id}\r\n                        updateBookShelf={this.props.updateBookShelf}\r\n                      />\r\n                    })}\r\n                  </ol>\r\n                </div>\r\n              </div>\r\n            }\r\n            {/* If there's no books containing wantToRead; hide list */}\r\n            {this.props.localBooksArray.filter((e) => e.shelf === \"wantToRead\").length > 0 &&\r\n              <div className=\"bookshelf\">\r\n                <h2 className=\"bookshelf-title\">Want to Read</h2>\r\n                <div className=\"bookshelf-books\">\r\n                  <ol className=\"books-grid\">\r\n                    {/* Book component: map want to read array */}\r\n                    {this.props.localBooksArray.filter((e) => e.shelf === \"wantToRead\").map((bookObject) => {\r\n                      return <Book\r\n                        book={bookObject}\r\n                        key={bookObject.id}\r\n                        updateBookShelf={this.props.updateBookShelf}\r\n                      />\r\n                    })}\r\n                  </ol>\r\n                </div>\r\n              </div>\r\n            }\r\n            {/* If there's no books containing read; hide list */}\r\n            {this.props.localBooksArray.filter((e) => e.shelf === \"read\").length > 0 &&\r\n              <div className=\"bookshelf\">\r\n                <h2 className=\"bookshelf-title\">Read</h2>\r\n                <div className=\"bookshelf-books\">\r\n                  <ol className=\"books-grid\">\r\n                    {/* Book component: map read array*/}\r\n                    {this.props.localBooksArray.filter((e) => e.shelf === \"read\").map((bookObject) => {\r\n                      return <Book\r\n                        book={bookObject}\r\n                        key={bookObject.id}\r\n                        updateBookShelf={this.props.updateBookShelf}\r\n                      />\r\n                    })}\r\n                  </ol>\r\n                </div>\r\n              </div>\r\n            }\r\n            {/* If the localBooksArray is empty; display message to user */}\r\n            {this.props.localBooksArray.length === 0 &&\r\n              <h2>Collection is empty! Add some books from the search page!</h2>\r\n            }\r\n          </div>\r\n        </div>\r\n        <div className=\"open-search\">\r\n          <Link to=\"/search\" className=\"button\">Add a book</Link>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BookShelf","import React, { Component } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport './App.css';\r\nimport Search from './Search';\r\nimport BookShelf from './BookShelf';\r\nimport { update, getAll } from './BooksAPI';\r\n\r\nclass BooksApp extends Component {\r\n  state = {\r\n    localBooksArray: [],\r\n  }\r\n\r\n  updateBookShelf = (book, shelfValue) => {\r\n    update(book, shelfValue)\r\n      .then(getAll)\r\n      .then(this.loadUpdatedShelves);\r\n  }\r\n\r\n  loadUpdatedShelves = (queryResponseArray) => {\r\n    this.setState(() => {\r\n      return { localBooksArray: queryResponseArray };\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        {/* Search Page */}\r\n        <Route exact path=\"/search\" render={() => {\r\n          return (\r\n            <Search\r\n              localBooksArray={this.state.localBooksArray}\r\n              loadUpdatedShelves={this.loadUpdatedShelves}\r\n              updateBookShelf={this.updateBookShelf}\r\n            />\r\n          )\r\n        }}>\r\n        </Route>\r\n\r\n        {/* Your Book Collection Page */}\r\n        <Route exact path=\"/\" render={() => {\r\n          return (\r\n            <div className=\"list-books\">\r\n              <BookShelf\r\n                localBooksArray={this.state.localBooksArray}\r\n                loadUpdatedShelves={this.loadUpdatedShelves}\r\n                updateBookShelf={this.updateBookShelf}\r\n              />\r\n            </div>\r\n          )\r\n        }}>\r\n        </Route>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BooksApp\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <App />\r\n  </HashRouter>\r\n  , document.getElementById('root'));\r\n"],"sourceRoot":""}